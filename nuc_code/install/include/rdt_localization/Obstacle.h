// Generated by gencpp from file rdt_localization/Obstacle.msg
// DO NOT EDIT!


#ifndef RDT_LOCALIZATION_MESSAGE_OBSTACLE_H
#define RDT_LOCALIZATION_MESSAGE_OBSTACLE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rdt_localization
{
template <class ContainerAllocator>
struct Obstacle_
{
  typedef Obstacle_<ContainerAllocator> Type;

  Obstacle_()
    : front_left(0)
    , front_right(0)
    , front_left_mid(0)
    , front_right_mid(0)
    , depo_front(0)
    , depo_back(0)  {
    }
  Obstacle_(const ContainerAllocator& _alloc)
    : front_left(0)
    , front_right(0)
    , front_left_mid(0)
    , front_right_mid(0)
    , depo_front(0)
    , depo_back(0)  {
  (void)_alloc;
    }



   typedef int64_t _front_left_type;
  _front_left_type front_left;

   typedef int64_t _front_right_type;
  _front_right_type front_right;

   typedef int64_t _front_left_mid_type;
  _front_left_mid_type front_left_mid;

   typedef int64_t _front_right_mid_type;
  _front_right_mid_type front_right_mid;

   typedef int64_t _depo_front_type;
  _depo_front_type depo_front;

   typedef int64_t _depo_back_type;
  _depo_back_type depo_back;





  typedef boost::shared_ptr< ::rdt_localization::Obstacle_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rdt_localization::Obstacle_<ContainerAllocator> const> ConstPtr;

}; // struct Obstacle_

typedef ::rdt_localization::Obstacle_<std::allocator<void> > Obstacle;

typedef boost::shared_ptr< ::rdt_localization::Obstacle > ObstaclePtr;
typedef boost::shared_ptr< ::rdt_localization::Obstacle const> ObstacleConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rdt_localization::Obstacle_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rdt_localization::Obstacle_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rdt_localization::Obstacle_<ContainerAllocator1> & lhs, const ::rdt_localization::Obstacle_<ContainerAllocator2> & rhs)
{
  return lhs.front_left == rhs.front_left &&
    lhs.front_right == rhs.front_right &&
    lhs.front_left_mid == rhs.front_left_mid &&
    lhs.front_right_mid == rhs.front_right_mid &&
    lhs.depo_front == rhs.depo_front &&
    lhs.depo_back == rhs.depo_back;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rdt_localization::Obstacle_<ContainerAllocator1> & lhs, const ::rdt_localization::Obstacle_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rdt_localization

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::rdt_localization::Obstacle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rdt_localization::Obstacle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rdt_localization::Obstacle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rdt_localization::Obstacle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rdt_localization::Obstacle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rdt_localization::Obstacle_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rdt_localization::Obstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8b91b992300f93c3e218076979730b49";
  }

  static const char* value(const ::rdt_localization::Obstacle_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8b91b992300f93c3ULL;
  static const uint64_t static_value2 = 0xe218076979730b49ULL;
};

template<class ContainerAllocator>
struct DataType< ::rdt_localization::Obstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rdt_localization/Obstacle";
  }

  static const char* value(const ::rdt_localization::Obstacle_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rdt_localization::Obstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 front_left\n"
"int64 front_right\n"
"int64 front_left_mid\n"
"int64 front_right_mid\n"
"int64 depo_front\n"
"int64 depo_back\n"
;
  }

  static const char* value(const ::rdt_localization::Obstacle_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rdt_localization::Obstacle_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.front_left);
      stream.next(m.front_right);
      stream.next(m.front_left_mid);
      stream.next(m.front_right_mid);
      stream.next(m.depo_front);
      stream.next(m.depo_back);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Obstacle_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rdt_localization::Obstacle_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rdt_localization::Obstacle_<ContainerAllocator>& v)
  {
    s << indent << "front_left: ";
    Printer<int64_t>::stream(s, indent + "  ", v.front_left);
    s << indent << "front_right: ";
    Printer<int64_t>::stream(s, indent + "  ", v.front_right);
    s << indent << "front_left_mid: ";
    Printer<int64_t>::stream(s, indent + "  ", v.front_left_mid);
    s << indent << "front_right_mid: ";
    Printer<int64_t>::stream(s, indent + "  ", v.front_right_mid);
    s << indent << "depo_front: ";
    Printer<int64_t>::stream(s, indent + "  ", v.depo_front);
    s << indent << "depo_back: ";
    Printer<int64_t>::stream(s, indent + "  ", v.depo_back);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RDT_LOCALIZATION_MESSAGE_OBSTACLE_H

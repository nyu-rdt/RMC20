// Generated by gencpp from file rdt_localization/Orientation_Vector.msg
// DO NOT EDIT!


#ifndef RDT_LOCALIZATION_MESSAGE_ORIENTATION_VECTOR_H
#define RDT_LOCALIZATION_MESSAGE_ORIENTATION_VECTOR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <rdt_localization/Pose.h>
#include <rdt_localization/Location.h>

namespace rdt_localization
{
template <class ContainerAllocator>
struct Orientation_Vector_
{
  typedef Orientation_Vector_<ContainerAllocator> Type;

  Orientation_Vector_()
    : robot_pose()
    , target_zone()
    , robot_speed(0)  {
    }
  Orientation_Vector_(const ContainerAllocator& _alloc)
    : robot_pose(_alloc)
    , target_zone(_alloc)
    , robot_speed(0)  {
  (void)_alloc;
    }



   typedef  ::rdt_localization::Pose_<ContainerAllocator>  _robot_pose_type;
  _robot_pose_type robot_pose;

   typedef  ::rdt_localization::Location_<ContainerAllocator>  _target_zone_type;
  _target_zone_type target_zone;

   typedef int64_t _robot_speed_type;
  _robot_speed_type robot_speed;





  typedef boost::shared_ptr< ::rdt_localization::Orientation_Vector_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rdt_localization::Orientation_Vector_<ContainerAllocator> const> ConstPtr;

}; // struct Orientation_Vector_

typedef ::rdt_localization::Orientation_Vector_<std::allocator<void> > Orientation_Vector;

typedef boost::shared_ptr< ::rdt_localization::Orientation_Vector > Orientation_VectorPtr;
typedef boost::shared_ptr< ::rdt_localization::Orientation_Vector const> Orientation_VectorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rdt_localization::Orientation_Vector_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rdt_localization::Orientation_Vector_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rdt_localization::Orientation_Vector_<ContainerAllocator1> & lhs, const ::rdt_localization::Orientation_Vector_<ContainerAllocator2> & rhs)
{
  return lhs.robot_pose == rhs.robot_pose &&
    lhs.target_zone == rhs.target_zone &&
    lhs.robot_speed == rhs.robot_speed;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rdt_localization::Orientation_Vector_<ContainerAllocator1> & lhs, const ::rdt_localization::Orientation_Vector_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rdt_localization

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::rdt_localization::Orientation_Vector_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rdt_localization::Orientation_Vector_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rdt_localization::Orientation_Vector_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rdt_localization::Orientation_Vector_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rdt_localization::Orientation_Vector_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rdt_localization::Orientation_Vector_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rdt_localization::Orientation_Vector_<ContainerAllocator> >
{
  static const char* value()
  {
    return "32c0233ad09fff327409092d7163201c";
  }

  static const char* value(const ::rdt_localization::Orientation_Vector_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x32c0233ad09fff32ULL;
  static const uint64_t static_value2 = 0x7409092d7163201cULL;
};

template<class ContainerAllocator>
struct DataType< ::rdt_localization::Orientation_Vector_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rdt_localization/Orientation_Vector";
  }

  static const char* value(const ::rdt_localization::Orientation_Vector_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rdt_localization::Orientation_Vector_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Pose robot_pose\n"
"Location target_zone\n"
"int64 robot_speed\n"
"================================================================================\n"
"MSG: rdt_localization/Pose\n"
"float32 x\n"
"float32 y\n"
"float32 orientation\n"
"================================================================================\n"
"MSG: rdt_localization/Location\n"
"float32 x\n"
"float32 y\n"
;
  }

  static const char* value(const ::rdt_localization::Orientation_Vector_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rdt_localization::Orientation_Vector_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.robot_pose);
      stream.next(m.target_zone);
      stream.next(m.robot_speed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Orientation_Vector_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rdt_localization::Orientation_Vector_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rdt_localization::Orientation_Vector_<ContainerAllocator>& v)
  {
    s << indent << "robot_pose: ";
    s << std::endl;
    Printer< ::rdt_localization::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.robot_pose);
    s << indent << "target_zone: ";
    s << std::endl;
    Printer< ::rdt_localization::Location_<ContainerAllocator> >::stream(s, indent + "  ", v.target_zone);
    s << indent << "robot_speed: ";
    Printer<int64_t>::stream(s, indent + "  ", v.robot_speed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RDT_LOCALIZATION_MESSAGE_ORIENTATION_VECTOR_H

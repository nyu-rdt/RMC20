// Generated by gencpp from file rdt_localization/Limb_Vector.msg
// DO NOT EDIT!


#ifndef RDT_LOCALIZATION_MESSAGE_LIMB_VECTOR_H
#define RDT_LOCALIZATION_MESSAGE_LIMB_VECTOR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rdt_localization
{
template <class ContainerAllocator>
struct Limb_Vector_
{
  typedef Limb_Vector_<ContainerAllocator> Type;

  Limb_Vector_()
    : door(false)
    , linActs_speed(0)
    , arm_speed(0)
    , drum_speed(0)  {
    }
  Limb_Vector_(const ContainerAllocator& _alloc)
    : door(false)
    , linActs_speed(0)
    , arm_speed(0)
    , drum_speed(0)  {
  (void)_alloc;
    }



   typedef uint8_t _door_type;
  _door_type door;

   typedef int64_t _linActs_speed_type;
  _linActs_speed_type linActs_speed;

   typedef int64_t _arm_speed_type;
  _arm_speed_type arm_speed;

   typedef int64_t _drum_speed_type;
  _drum_speed_type drum_speed;





  typedef boost::shared_ptr< ::rdt_localization::Limb_Vector_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rdt_localization::Limb_Vector_<ContainerAllocator> const> ConstPtr;

}; // struct Limb_Vector_

typedef ::rdt_localization::Limb_Vector_<std::allocator<void> > Limb_Vector;

typedef boost::shared_ptr< ::rdt_localization::Limb_Vector > Limb_VectorPtr;
typedef boost::shared_ptr< ::rdt_localization::Limb_Vector const> Limb_VectorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rdt_localization::Limb_Vector_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rdt_localization::Limb_Vector_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rdt_localization::Limb_Vector_<ContainerAllocator1> & lhs, const ::rdt_localization::Limb_Vector_<ContainerAllocator2> & rhs)
{
  return lhs.door == rhs.door &&
    lhs.linActs_speed == rhs.linActs_speed &&
    lhs.arm_speed == rhs.arm_speed &&
    lhs.drum_speed == rhs.drum_speed;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rdt_localization::Limb_Vector_<ContainerAllocator1> & lhs, const ::rdt_localization::Limb_Vector_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rdt_localization

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::rdt_localization::Limb_Vector_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rdt_localization::Limb_Vector_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rdt_localization::Limb_Vector_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rdt_localization::Limb_Vector_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rdt_localization::Limb_Vector_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rdt_localization::Limb_Vector_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rdt_localization::Limb_Vector_<ContainerAllocator> >
{
  static const char* value()
  {
    return "95198abd0938eea51c580fdd9748821b";
  }

  static const char* value(const ::rdt_localization::Limb_Vector_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x95198abd0938eea5ULL;
  static const uint64_t static_value2 = 0x1c580fdd9748821bULL;
};

template<class ContainerAllocator>
struct DataType< ::rdt_localization::Limb_Vector_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rdt_localization/Limb_Vector";
  }

  static const char* value(const ::rdt_localization::Limb_Vector_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rdt_localization::Limb_Vector_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool door\n"
"int64 linActs_speed\n"
"int64 arm_speed\n"
"int64 drum_speed\n"
;
  }

  static const char* value(const ::rdt_localization::Limb_Vector_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rdt_localization::Limb_Vector_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.door);
      stream.next(m.linActs_speed);
      stream.next(m.arm_speed);
      stream.next(m.drum_speed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Limb_Vector_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rdt_localization::Limb_Vector_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rdt_localization::Limb_Vector_<ContainerAllocator>& v)
  {
    s << indent << "door: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.door);
    s << indent << "linActs_speed: ";
    Printer<int64_t>::stream(s, indent + "  ", v.linActs_speed);
    s << indent << "arm_speed: ";
    Printer<int64_t>::stream(s, indent + "  ", v.arm_speed);
    s << indent << "drum_speed: ";
    Printer<int64_t>::stream(s, indent + "  ", v.drum_speed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RDT_LOCALIZATION_MESSAGE_LIMB_VECTOR_H

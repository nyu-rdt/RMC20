// Generated by gencpp from file rdt_localization/Drive_Vector.msg
// DO NOT EDIT!


#ifndef RDT_LOCALIZATION_MESSAGE_DRIVE_VECTOR_H
#define RDT_LOCALIZATION_MESSAGE_DRIVE_VECTOR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rdt_localization
{
template <class ContainerAllocator>
struct Drive_Vector_
{
  typedef Drive_Vector_<ContainerAllocator> Type;

  Drive_Vector_()
    : robot_spd(0)
    , offset_driveMode(0)  {
    }
  Drive_Vector_(const ContainerAllocator& _alloc)
    : robot_spd(0)
    , offset_driveMode(0)  {
  (void)_alloc;
    }



   typedef int64_t _robot_spd_type;
  _robot_spd_type robot_spd;

   typedef int64_t _offset_driveMode_type;
  _offset_driveMode_type offset_driveMode;





  typedef boost::shared_ptr< ::rdt_localization::Drive_Vector_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rdt_localization::Drive_Vector_<ContainerAllocator> const> ConstPtr;

}; // struct Drive_Vector_

typedef ::rdt_localization::Drive_Vector_<std::allocator<void> > Drive_Vector;

typedef boost::shared_ptr< ::rdt_localization::Drive_Vector > Drive_VectorPtr;
typedef boost::shared_ptr< ::rdt_localization::Drive_Vector const> Drive_VectorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rdt_localization::Drive_Vector_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rdt_localization::Drive_Vector_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rdt_localization::Drive_Vector_<ContainerAllocator1> & lhs, const ::rdt_localization::Drive_Vector_<ContainerAllocator2> & rhs)
{
  return lhs.robot_spd == rhs.robot_spd &&
    lhs.offset_driveMode == rhs.offset_driveMode;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rdt_localization::Drive_Vector_<ContainerAllocator1> & lhs, const ::rdt_localization::Drive_Vector_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rdt_localization

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::rdt_localization::Drive_Vector_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rdt_localization::Drive_Vector_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rdt_localization::Drive_Vector_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rdt_localization::Drive_Vector_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rdt_localization::Drive_Vector_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rdt_localization::Drive_Vector_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rdt_localization::Drive_Vector_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9bb2e6492d363aa84cce71e895f95bc0";
  }

  static const char* value(const ::rdt_localization::Drive_Vector_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9bb2e6492d363aa8ULL;
  static const uint64_t static_value2 = 0x4cce71e895f95bc0ULL;
};

template<class ContainerAllocator>
struct DataType< ::rdt_localization::Drive_Vector_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rdt_localization/Drive_Vector";
  }

  static const char* value(const ::rdt_localization::Drive_Vector_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rdt_localization::Drive_Vector_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 robot_spd\n"
"int64 offset_driveMode\n"
;
  }

  static const char* value(const ::rdt_localization::Drive_Vector_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rdt_localization::Drive_Vector_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.robot_spd);
      stream.next(m.offset_driveMode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Drive_Vector_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rdt_localization::Drive_Vector_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rdt_localization::Drive_Vector_<ContainerAllocator>& v)
  {
    s << indent << "robot_spd: ";
    Printer<int64_t>::stream(s, indent + "  ", v.robot_spd);
    s << indent << "offset_driveMode: ";
    Printer<int64_t>::stream(s, indent + "  ", v.offset_driveMode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RDT_LOCALIZATION_MESSAGE_DRIVE_VECTOR_H
